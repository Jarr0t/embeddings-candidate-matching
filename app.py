import streamlit as st
import json
from rank import rank
from extract_job import Job
from extract_candidate import Candidate

st.set_page_config(page_title="ML –ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", layout="wide")
st.title("üöÄ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

def year_word(y):
    y = int(y)
    if y % 10 == 1 and y % 100 != 11:
        return "–≥–æ–¥"
    if 2 <= y % 10 <= 4 and not (12 <= y % 100 <= 14):
        return "–≥–æ–¥–∞"
    return "–ª–µ—Ç"

# ============================
#   –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ============================
with open("data/jobs.json", "r", encoding="utf-8") as f:
    jobs = [Job.model_validate(x) for x in json.load(f)]

with open("data/candidates.json", "r", encoding="utf-8") as f:
    candidates = [Candidate.model_validate(x) for x in json.load(f)]

job_list = {job.id: job.title for job in jobs}

# ============================
#   SIDEBAR –ù–ê–°–¢–†–û–ô–ö–ò
# ============================
st.sidebar.header("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")

vector_w = st.sidebar.slider("üß† –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å (semantic search)", 0.0, 1.0, 0.5)
skill_w = st.sidebar.slider("üõ† –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤", 0.0, 1.0, 0.3)
exp_w = st.sidebar.slider("üìÖ –û–ø—ã—Ç", 0.0, 1.0, 0.1)
domain_w = st.sidebar.slider("üè¢ –î–æ–º–µ–Ω", 0.0, 1.0, 0.05)
level_w = st.sidebar.slider("üéñ –£—Ä–æ–≤–µ–Ω—å", 0.0, 1.0, 0.05)

top_k = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", 1, 10, 3)

# ============================
#   –í–´–ë–û–† –í–ê–ö–ê–ù–°–ò–ò
# ============================
st.subheader("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é")
job_id = st.selectbox("–í–∞–∫–∞–Ω—Å–∏–∏:", options=list(job_list.keys()), format_func=lambda x: job_list[x])
job = next(j for j in jobs if j.id == job_id)

# –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
with st.expander("üìÑ –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", expanded=True):
    st.markdown(f"### **{job.title}** ‚Äî {job.level_required}")
    st.write(f"**–î–æ–º–µ–Ω:** {job.domain or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
    st.write(f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {job.specialization or '‚Äî'}")
    st.write(f"**–°—Ç–µ–∫:** {', '.join(job.stack or [])}")
    st.write(f"**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** {', '.join(job.substack or [])}")
    st.write(f"**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:** ‚úÖ {', '.join(job.must_have or [])}")
    if job.nice_to_have:
        st.write(f"**–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ:** ‚≠ê {', '.join(job.nice_to_have)}")
    if job.salary_max:
        st.success(f"üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ {job.salary_max}")
    st.info(f"üßæ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:\n\n> {job.source_text}")

# ============================
#   –ü–û–ò–°–ö –ö–ê–ù–î–ò–î–ê–¢–û–í
# ============================
if st.button("üî• –ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"):
    st.write("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö‚Ä¶")

    results = rank(
        job_id,
        top_n=top_k,
        custom_weights=dict(
            vector=vector_w,
            skills=skill_w,
            experience=exp_w,
            domain=domain_w,
            level=level_w
        )
    )

    st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –õ—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:")

    def pct(x):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ 0‚Äì1 ‚Üí 0‚Äì100% –∫—Ä–∞—Å–∏–≤–æ"""
        try:
            return f"{float(x)*100:.0f}%"
        except:
            return "‚Äî"

    for r in results:
        cand = next(c for c in candidates if c.id == r["candidate_id"])

        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        st.markdown(f"""
        <div style="
            border:1px solid #444; 
            padding:15px; 
            border-radius:10px;
            margin-bottom:15px;
            background:#141414;
        ">
        <h3 style="margin:0;">üßë {r['name']} ‚Äî Score: <b>{r['final_score']}</b></h3>
        </div>
        """, unsafe_allow_html=True)

        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –≤–∏–¥–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        vec = float(r["vector_similarity"])
        cov = float(r["skill_coverage"])
        exp = float(r["experience_score"])

        cols = st.columns(4)
        cols[0].metric("üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞", pct(vec))
        cols[1].metric("üõ† –ù–∞–≤—ã–∫–∏", pct(cov))
        cols[2].metric("üìÖ –û–ø—ã—Ç", pct(exp))
        cols[3].metric("üè¢ –î–æ–º–µ–Ω", "‚úÖ" if r["domain_match"] else "‚ùå")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤
        st.progress(cov)
        st.write(f"–ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: **{pct(cov)}**")

        with st.expander("üîç –ü–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"):
            st.write(f"**–£—Ä–æ–≤–µ–Ω—å:** {cand.level}")
            st.write(f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {cand.specialization}")
            st.write(f"**–ù–∞–≤—ã–∫–∏:** {', '.join(cand.skills or [])}")
            st.write(f"**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** {', '.join(cand.subskills or [])}")
            if cand.years_by_area:
                formatted_exp = []
                for area, years in cand.years_by_area.items():
                    y = int(years) if years == int(years) else years
                    formatted_exp.append(f"{area} ‚Äî {y} {year_word(y)}")

                st.write(f"**–û–ø—ã—Ç:** {', '.join(formatted_exp)}")
            else:
                st.write("**–û–ø—ã—Ç:** –Ω–µ —É–∫–∞–∑–∞–Ω")

            st.write(f"**–õ–æ–∫–∞—Ü–∏—è:** {cand.location}")
            if cand.salary_expectation:
                st.success(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: {cand.salary_expectation}")
            st.write(f"**–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ:**\n\n> {cand.source_text}")

        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏
        with st.expander("üß© –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç? (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏)"):
            if r['must_have_ok']:
                st.write("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                st.write("‚ùå –ù–µ –≤—Å–µ must-have –Ω–∞–≤—ã–∫–∏ –µ—Å—Ç—å")

            if r['domain_match']:
                st.write("‚úÖ –û–ø—ã—Ç –≤ –Ω—É–∂–Ω–æ–π –¥–æ–º–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
            if r['level_match']:
                st.write("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é –≤–∞–∫–∞–Ω—Å–∏–∏")

            st.write(f"üõ† –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: **{pct(cov)}**")
            st.write(f"üìÖ –û–ø—ã—Ç: **{pct(exp)}**")
            st.write(f"üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞: **{pct(vec)}**")

            missing = []
            for skill in job.must_have or []:
                if skill not in (cand.skills or []) and skill not in (cand.subskills or []):
                    missing.append(skill)
            if missing:
                st.warning(f"‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(missing)}")

        st.markdown("---")

else:
    st.info("‚¨Ö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!")
