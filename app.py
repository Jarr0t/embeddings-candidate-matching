import os
import json
import streamlit as st

from rank import rank
from extract_job import Job
from extract_candidate import Candidate, parse_candidate
from build_embeddings import build as rebuild_embeddings

st.set_page_config(page_title="ML –ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", layout="wide")
st.title("üöÄ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")


def year_word(y: float):
    y = int(y)
    if y % 10 == 1 and y % 100 != 11:
        return "–≥–æ–¥"
    if 2 <= y % 10 <= 4 and not (12 <= y % 100 <= 14):
        return "–≥–æ–¥–∞"
    return "–ª–µ—Ç"


# ============================
#   –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ============================
def load_data():
    with open("data/jobs.json", "r", encoding="utf-8") as f:
        jobs = [Job.model_validate(x) for x in json.load(f)]

    with open("data/candidates.json", "r", encoding="utf-8") as f:
        candidates = [Candidate.model_validate(x) for x in json.load(f)]

    return jobs, candidates


jobs, candidates = load_data()
job_list = {job.id: job.title for job in jobs}

# ============================
#   SIDEBAR –ù–ê–°–¢–†–û–ô–ö–ò
# ============================
st.sidebar.header("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")

vector_w = st.sidebar.slider("üß† –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å", 0.0, 1.0, 0.5)
skill_w = st.sidebar.slider("üõ† –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤", 0.0, 1.0, 0.3)
exp_w = st.sidebar.slider("üìÖ –û–ø—ã—Ç", 0.0, 1.0, 0.1)
domain_w = st.sidebar.slider("üè¢ –î–æ–º–µ–Ω", 0.0, 1.0, 0.05)
level_w = st.sidebar.slider("üéñ –£—Ä–æ–≤–µ–Ω—å", 0.0, 1.0, 0.05)

top_k = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", 1, 10, 3)

threshold = st.sidebar.slider(
    "üîé –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–ø–æ—Ä–æ–≥ –æ—Ç—Å–µ—á–µ–Ω–∏—è)",
    0.0, 1.0, 0.0, 0.01
)

if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    jobs, candidates = load_data()
    job_list = {job.id: job.title for job in jobs}
    st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.")

# ============================
#   –í–ö–õ–ê–î–ö–ò
# ============================
tab_find, tab_add, tab_add_job = st.tabs(["üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", "üÜï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"])

# ====================================================================
#   ‚úÖ TAB 1 ‚Äî –ü–û–ò–°–ö
# ====================================================================
with tab_find:

    st.subheader("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é")
    job_id = st.selectbox(
        "–í–∞–∫–∞–Ω—Å–∏–∏:",
        options=list(job_list.keys()),
        format_func=lambda x: job_list[x]
    )
    job = next(j for j in jobs if j.id == job_id)

    # –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    with st.expander("üìÑ –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", expanded=True):
        st.markdown(f"### **{job.title}** ‚Äî {job.level_required}")
        st.write(f"**–î–æ–º–µ–Ω:** {job.domain or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        st.write(f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {job.specialization or '‚Äî'}")
        st.write(f"**–°—Ç–µ–∫:** {', '.join(job.stack or [])}")
        st.write(f"**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** {', '.join(job.substack or [])}")

        # ‚úÖ –û–ø—ã—Ç
        if getattr(job, "exp_min_years_overall", None):
            y = job.exp_min_years_overall
            st.write(f"**–û–ø—ã—Ç:** –æ—Ç {int(y)} {year_word(y)}")
        elif getattr(job, "exp_min_years_by_area", None):
            st.write("**–û–ø—ã—Ç –ø–æ –æ–±–ª–∞—Å—Ç—è–º:**")
            for area, years in job.exp_min_years_by_area.items():
                st.write(f"‚Ä¢ {area}: –æ—Ç {int(years)} {year_word(years)}")
        else:
            st.write("**–û–ø—ã—Ç:** –Ω–µ —É–∫–∞–∑–∞–Ω")

        st.write(f"**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:** ‚úÖ {', '.join(job.must_have or [])}")

        if job.nice_to_have:
            st.write(f"**–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ:** ‚≠ê {', '.join(job.nice_to_have)}")

        if job.salary_max:
            st.success(f"üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ {job.salary_max}")

        with st.expander("üßæ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"):
            st.code(job.source_text, language=None)

    # ============================
    #   –ü–û–ò–°–ö –ö–ê–ù–î–ò–î–ê–¢–û–í
    # ============================
    if st.button("üî• –ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"):
        st.write("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö‚Ä¶")

        results = rank(
            job_id,
            top_n=top_k,
            custom_weights=dict(
                vector=vector_w,
                skills=skill_w,
                experience=exp_w,
                domain=domain_w,
                level=level_w
            ),
            threshold=threshold
        )



        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –õ—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:")
        if not results or len(results) == 0:
            st.warning("‚ùó –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä–æ–≥—É –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª.")
        else:

            def pct(x):
                try:
                    return f"{float(x)*100:.0f}%"
                except:
                    return "‚Äî"

            for r in results:
                cand = next(c for c in candidates if c.id == r["candidate_id"])

                st.markdown(f"""
                <div style="
                    border:1px solid #444; 
                    padding:15px; 
                    border-radius:10px;
                    margin-bottom:15px;
                    background:#141414;
                ">
                <h3 style="margin:0;">üßë {r['name']} ‚Äî Score: <b>{r['final_score']}</b></h3>
                </div>
                """, unsafe_allow_html=True)

                vec = float(r["vector_similarity"])
                cov = float(r["skill_coverage"])
                exp = float(r["experience_score"])

                cols = st.columns(4)
                cols[0].metric("üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞", pct(vec))
                cols[1].metric("üõ† –ù–∞–≤—ã–∫–∏", pct(cov))
                cols[2].metric("üìÖ –û–ø—ã—Ç", pct(exp))
                cols[3].metric("üè¢ –î–æ–º–µ–Ω", "‚úÖ" if r["domain_match"] else "‚ùå")

                st.progress(cov)
                st.write(f"–ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: **{pct(cov)}**")

                with st.expander("üîç –ü–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"):
                    st.write(f"**–£—Ä–æ–≤–µ–Ω—å:** {cand.level}")
                    st.write(f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {cand.specialization}")
                    st.write(f"**–ù–∞–≤—ã–∫–∏:** {', '.join(cand.skills or [])}")
                    st.write(f"**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** {', '.join(cand.subskills or [])}")

                    if cand.years_by_area:
                        formatted_exp = []
                        for area, years in cand.years_by_area.items():
                            y = int(years) if years == int(years) else years
                            formatted_exp.append(f"{area} ‚Äî {y} {year_word(y)}")
                        st.write(f"**–û–ø—ã—Ç:** {', '.join(formatted_exp)}")
                    else:
                        st.write("**–û–ø—ã—Ç:** –Ω–µ —É–∫–∞–∑–∞–Ω")

                    st.write(f"**–õ–æ–∫–∞—Ü–∏—è:** {cand.location}")
                    if cand.salary_expectation:
                        st.success(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: {cand.salary_expectation}")
                    st.write(f"**–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ:**\n\n> {cand.source_text}")

                with st.expander("üß© –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç? (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏)"):
                    if r['must_have_ok']:
                        st.write("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    else:
                        st.write("‚ùå –ù–µ –≤—Å–µ must-have –Ω–∞–≤—ã–∫–∏ –µ—Å—Ç—å")

                    if r['domain_match']:
                        st.write("‚úÖ –û–ø—ã—Ç –≤ –Ω—É–∂–Ω–æ–π –¥–æ–º–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
                    if r['level_match']:
                        st.write("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é –≤–∞–∫–∞–Ω—Å–∏–∏")

                    st.write(f"üõ† –ù–∞–≤—ã–∫–∏: **{pct(cov)}**")
                    st.write(f"üìÖ –û–ø—ã—Ç: **{pct(exp)}**")
                    st.write(f"üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞: **{pct(vec)}**")

                    missing = []
                    for skill in job.must_have or []:
                        if skill not in (cand.skills or []) and skill not in (cand.subskills or []):
                            missing.append(skill)
                    if missing:
                        st.warning(f"‚ùó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(missing)}")

                st.markdown("---")
    else:
        st.info("‚¨Ö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!")

# ====================================================================
#   ‚úÖ TAB 2 ‚Äî –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–î–ò–î–ê–¢–ê
# ====================================================================
with tab_add:
    st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

    resume_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
        placeholder="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Ä–µ–∑—é–º–µ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞...",
        height=200
    )

    if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"):
        if not resume_text.strip():
            st.error("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ.")
        else:
            try:
                # 1) –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ LLM
                new_cand = parse_candidate(resume_text)

                # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π JSON
                with open("data/candidates.json", "r", encoding="utf-8") as f:
                    data = json.load(f)

                # 3) –ù–æ–≤—ã–π ID
                new_id = max(int(item["id"]) for item in data) + 1
                new_cand.id = new_id

                # 4) –î–æ–±–∞–≤–ª—è–µ–º –≤ JSON
                data.append(new_cand.model_dump())

                with open("data/candidates.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                # 5) –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∞
                rebuild_embeddings()

                st.success(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω! ID = {new_id}")
                st.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚Äî –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∏—Å–∫–∞—Ç—å —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ====================================================================
#   ‚úÖ TAB 3 ‚Äî –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–ê–ö–ê–ù–°–ò–ò
# ====================================================================
from extract_job import parse_job

with tab_add_job:
    st.subheader("üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")

    job_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:",
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ...",
        height=220
    )

    if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"):
        if not job_text.strip():
            st.error("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é.")
        else:
            try:
                # 1) –†–∞–∑–±–æ—Ä —á–µ—Ä–µ–∑ LLM
                new_job = parse_job(job_text)

                # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π json
                with open("data/jobs.json", "r", encoding="utf-8") as f:
                    data = json.load(f)

                # 3) –ù–æ–≤—ã–π ID
                new_id = max(int(item["id"]) for item in data) + 1
                new_job.id = new_id

                # 4) –î–æ–±–∞–≤–ª—è–µ–º –≤ JSON
                data.append(new_job.model_dump())

                with open("data/jobs.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                st.success(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID = {new_id}")
                st.info("–¢–µ–ø–µ—Ä—å –µ—ë –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                st.exception(e)

