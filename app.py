import re
import json
import streamlit as st
from extract_job import parse_job

from rank import rank
from extract_job import Job
from extract_candidate import Candidate, parse_candidate
from build_embeddings import build as rebuild_embeddings

st.set_page_config(page_title="ML –ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", layout="wide")
st.title("üöÄ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

def pretty_box(text):
    st.markdown(
        """
        <style>
        .pretty-box {
            background:#111;
            border:1px solid #333;
            border-radius:8px;
            padding:12px;
            font-family:monospace;
            font-size:14px;
            line-height:1.45;
            white-space:pre-wrap;
            overflow-x:auto;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    st.markdown(f"<div class='pretty-box'>{text}</div>", unsafe_allow_html=True)


def year_word(y: float):
    y = int(y)
    if y % 10 == 1 and y % 100 != 11:
        return "–≥–æ–¥"
    if 2 <= y % 10 <= 4 and not (12 <= y % 100 <= 14):
        return "–≥–æ–¥–∞"
    return "–ª–µ—Ç"


# ============================
#   –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ============================
def load_data():
    with open("data/jobs.json", "r", encoding="utf-8") as f:
        jobs = [Job.model_validate(x) for x in json.load(f)]

    with open("data/candidates.json", "r", encoding="utf-8") as f:
        candidates = [Candidate.model_validate(x) for x in json.load(f)]

    return jobs, candidates


jobs, candidates = load_data()
job_list = {job.id: job.title for job in jobs}

# ============================
#   SIDEBAR –ù–ê–°–¢–†–û–ô–ö–ò
# ============================
st.sidebar.header("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")

vector_w = st.sidebar.slider("üß† –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å", 0.0, 1.0, 0.5)
skill_w = st.sidebar.slider("üõ† –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤", 0.0, 1.0, 0.3)
exp_w = st.sidebar.slider("üìÖ –û–ø—ã—Ç", 0.0, 1.0, 0.1)
domain_w = st.sidebar.slider("üè¢ –î–æ–º–µ–Ω", 0.0, 1.0, 0.05)
level_w = st.sidebar.slider("üéñ –£—Ä–æ–≤–µ–Ω—å", 0.0, 1.0, 0.05)

top_k = st.sidebar.slider("–°–∫–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", 1, 10, 3)

strict_thr = st.sidebar.slider(
    "‚úÖ –ü–æ—Ä–æ–≥ —Å—Ç—Ä–æ–≥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ (STRICT)",
    0.0, 1.0, 0.80, 0.01
)

partial_thr = st.sidebar.slider(
    "üî∂ –ü–æ—Ä–æ–≥ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ (PARTIAL)",
    0.0, 1.0, 0.60, 0.01
)

threshold = st.sidebar.slider(
    "üîé –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–ø–æ—Ä–æ–≥ –æ—Ç—Å–µ—á–µ–Ω–∏—è)",
    0.0, 1.0, 0.0, 0.01
)

if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    jobs, candidates = load_data()
    job_list = {job.id: job.title for job in jobs}
    st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.")

# ============================
#   –í–ö–õ–ê–î–ö–ò
# ============================
tab_find, tab_all_cand, tab_all_jobs, tab_add, tab_add_job = st.tabs([
    "üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤",
    "üìã –í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã",
    "üìå –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
    "üÜï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"
])


# ====================================================================
#   ‚úÖ TAB 1 ‚Äî –ü–û–ò–°–ö
# ====================================================================
with tab_find:

    st.subheader("üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é")
    job_id = st.selectbox(
        "–í–∞–∫–∞–Ω—Å–∏–∏:",
        options=list(job_list.keys()),
        format_func=lambda x: job_list[x]
    )
    job = next(j for j in jobs if j.id == job_id)

    # –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    with st.expander("üìÑ –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", expanded=True):
        st.markdown(f"### **{job.title}** ‚Äî {job.level_required}")
        st.write(f"**–î–æ–º–µ–Ω:** {job.domain or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        st.write(f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {job.specialization or '‚Äî'}")
        st.write(f"**–°—Ç–µ–∫:** {', '.join(job.stack or [])}")
        st.write(f"**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** {', '.join(job.substack or [])}")

        # ‚úÖ –û–ø—ã—Ç
        if getattr(job, "exp_min_years_overall", None):
            y = job.exp_min_years_overall
            st.write(f"**–û–ø—ã—Ç:** –æ—Ç {int(y)} {year_word(y)}")
        elif getattr(job, "exp_min_years_by_area", None):
            st.write("**–û–ø—ã—Ç –ø–æ –æ–±–ª–∞—Å—Ç—è–º:**")
            for area, years in job.exp_min_years_by_area.items():
                st.write(f"‚Ä¢ {area}: –æ—Ç {int(years)} {year_word(years)}")
        else:
            st.write("**–û–ø—ã—Ç:** –Ω–µ —É–∫–∞–∑–∞–Ω")

        st.write(f"**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:** ‚úÖ {', '.join(job.must_have or [])}")

        if job.nice_to_have:
            st.write(f"**–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ:** ‚≠ê {', '.join(job.nice_to_have)}")

        if job.salary_max:
            st.success(f"üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ {job.salary_max}")

        with st.expander("üßæ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"):
            st.code(job.source_text, language=None)

    # ============================
    #   –ü–û–ò–°–ö –ö–ê–ù–î–ò–î–ê–¢–û–í
    # ============================
    if st.button("üî• –ù–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"):
        st.write("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö‚Ä¶")

        results = rank(
            job_id,
            top_n=top_k,
            custom_weights=dict(
                vector=vector_w,
                skills=skill_w,
                experience=exp_w,
                domain=domain_w,
                level=level_w
            ),
            threshold=threshold,
            strict_thr = strict_thr,
            partial_thr = partial_thr,
        )

        if not results:
            st.warning("‚ùó –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä–æ–≥—É –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª.")
        else:
            st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –õ—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:")
            def pct(x):
                try:
                    return f"{float(x) * 100:.0f}%"
                except:
                    return "‚Äî"

            for r in results:
                cand = next(c for c in candidates if c.id == r["candidate_id"])

                st.markdown(f"""
                <div style="
                    border:1px solid #444; 
                    padding:15px; 
                    border-radius:10px;
                    margin-bottom:15px;
                    background:#141414;
                ">
                <h3 style="margin:0;">üßë {r['name']} ‚Äî Score: <b>{r['final_score']}</b></h3>
                </div>
                """, unsafe_allow_html=True)

                vec = float(r["vector_similarity"])
                cov = float(r["skill_coverage"])
                exp = float(r["experience_score"])

                cols = st.columns(4)
                cols[0].metric("üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞", pct(vec))
                cols[1].metric("üõ† –ù–∞–≤—ã–∫–∏", pct(cov))
                cols[2].metric("üìÖ –û–ø—ã—Ç", pct(exp))
                cols[3].metric("üè¢ –î–æ–º–µ–Ω", "‚úÖ" if r["domain_match"] else "‚ùå")

                st.progress(cov)
                st.write(f"–ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: **{pct(cov)}**")

                with st.expander("üîç –ü–æ–ª–Ω–æ–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"):
                    st.write(f"**–£—Ä–æ–≤–µ–Ω—å:** {cand.level}")
                    st.write(f"**–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:** {cand.specialization}")
                    st.write(f"**–ù–∞–≤—ã–∫–∏:** {', '.join(cand.skills or [])}")
                    st.write(f"**–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:** {', '.join(cand.subskills or [])}")

                    if cand.years_by_area:
                        formatted_exp = []
                        for area, years in cand.years_by_area.items():
                            y = int(years) if years == int(years) else years
                            formatted_exp.append(f"{area} ‚Äî {y} {year_word(y)}")
                        st.write(f"**–û–ø—ã—Ç:** {', '.join(formatted_exp)}")
                    else:
                        st.write("**–û–ø—ã—Ç:** –Ω–µ —É–∫–∞–∑–∞–Ω")

                    st.write(f"**–õ–æ–∫–∞—Ü–∏—è:** {cand.location}")
                    if cand.salary_expectation:
                        st.success(f"üí∞ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: {cand.salary_expectation}")
                    st.write(f"**–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ:**\n\n> {cand.source_text}")

                with st.expander("üß© –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç? (–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏)"):

                    st.write(f"üß† –°–µ–º–∞–Ω—Ç–∏–∫–∞: **{pct(vec)}**")
                    st.write(f"üõ† –ù–∞–≤—ã–∫–∏: **{pct(cov)}**")
                    st.write(f"üìÖ –û–ø—ã—Ç: **{pct(exp)}**")
                    st.write(f"üè¢ –î–æ–º–µ–Ω: {'‚úÖ' if r['domain_match'] else '‚ùå'}")
                    st.write(f"üéñ –£—Ä–æ–≤–µ–Ω—å: {'‚úÖ' if r['level_match'] else '‚ùå'}")
                    st.markdown("---")

                    st.markdown("### üî• –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ)")

                    matches = r.get("skill_matches", [])  # [(req, found, sim)]
                    partials = r.get("skill_partials", [])  # [(req, found, sim)]
                    missing_must = r.get("missing_must_have", [])  # [skill names]

                    # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
                    req_all = (job.must_have or []) + (job.nice_to_have or []) + (job.stack or []) + (
                                job.substack or [])

                    # –∫–∞–∫–∏–µ –Ω–µ –ø–æ–∫—Ä—ã—Ç—ã –≤–æ–æ–±—â–µ
                    covered_req = set([m[0] for m in matches] + [p[0] for p in partials] + missing_must)
                    missing_other = [x for x in req_all if x not in covered_req]

                    # ‚úÖ —Å—Ç—Ä–æ–≥–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if matches:
                        st.markdown("**‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç —Å—Ç—Ä–æ–≥–æ:**")
                        chips = " ".join([
                            f"<span style='background:#1f4f2f; color:#00ff9d; padding:4px 10px; border-radius:8px; margin:2px; display:inline-block;'>{m[0]} ‚ûù {m[1]}</span>"
                            for m in matches
                        ])
                        st.markdown(chips, unsafe_allow_html=True)

                    # üî∂ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if partials:
                        st.markdown("**üî∂ –ß–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç:**")
                        chips = " ".join([
                            f"<span style='background:#2b2b2b; color:#ffd95a; padding:4px 10px; border-radius:8px; margin:2px; display:inline-block;'>{p[0]} ‚âà {p[1]}</span>"
                            for p in partials
                        ])
                        st.markdown(chips, unsafe_allow_html=True)

                    # ‚ùå must-have –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    if missing_must:
                        st.markdown("**‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö:**")
                        chips = " ".join([
                            f"<span style='background:#4a1111; color:#ff6b6b; padding:4px 10px; border-radius:8px; margin:2px; display:inline-block;'>{m}</span>"
                            for m in missing_must
                        ])
                        st.markdown(chips, unsafe_allow_html=True)

                    # ‚≠ê –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç
                    if missing_other:
                        st.markdown("**‚≠ê –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –Ω–µ—Ç:**")
                        chips = " ".join([
                            f"<span style='background:#222; color:#aaa; padding:4px 10px; border-radius:8px; margin:2px; display:inline-block;'>{m}</span>"
                            for m in missing_other
                        ])
                        st.markdown(chips, unsafe_allow_html=True)

                    st.markdown("---")
                    st.markdown("### ‚ú® –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤ —Ä–µ–∑—é–º–µ")

                    # –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                    highlight_words = (
                            [m[0] for m in matches] +
                            [p[0] for p in partials] +
                            missing_must +
                            missing_other
                    )

                    text = cand.source_text

                    if highlight_words:
                        # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                        pattern = r"(" + "|".join([re.escape(w) for w in highlight_words]) + r")"


                        def repl(mo):
                            w = mo.group(0)
                            if any(w == mm[0] for mm in matches):
                                return f"<span style='background:#003b1f; color:#00ff9d; padding:2px 5px; border-radius:6px;'>{w}</span>"
                            if w in missing_must:
                                return f"<span style='background:#4a1111; color:#ff6b6b; padding:2px 5px; border-radius:6px;'>{w}</span>"
                            if any(w == pp[0] for pp in partials):
                                return f"<span style='background:#2b2b2b; color:#ffd95a; padding:2px 5px; border-radius:6px;'>{w}</span>"
                            return f"<span style='background:#222; color:#aaa; padding:2px 5px; border-radius:6px;'>{w}</span>"


                        text = re.sub(pattern, repl, text, flags=re.IGNORECASE)

                    st.markdown(
                        f"""
                        <div style='background:#111; padding:12px; border-radius:8px; border:1px solid #333; white-space:pre-wrap;'>
                            {text}
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                st.markdown("---")
    else:
        st.info("‚¨Ö –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!")

# ====================================================================
#   ‚úÖ TAB 2 ‚Äî –°–ü–ò–°–û–ö –í–°–ï–• –ö–ê–ù–î–ò–î–ê–¢–û–í
# ====================================================================
with tab_all_cand:
    st.subheader("üìã –í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")

    for c in candidates:
        st.markdown(
            f"""
            <div style="
                border:1px solid #333; 
                border-radius:10px; 
                padding:15px; 
                margin-bottom:12px; 
                background:#141414;
            ">
                <h4 style="margin:0;">üßë {c.name}</h4>
                <b>–£—Ä–æ–≤–µ–Ω—å:</b> {c.level or '‚Äî'}<br>
                <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {c.specialization or '‚Äî'}<br>
                <b>–ù–∞–≤—ã–∫–∏:</b> {', '.join(c.skills or [])}<br>
                <b>–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:</b> {', '.join(c.subskills or [])}<br>
            </div>
            """,
            unsafe_allow_html=True
        )

        with st.expander("üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ"):
            st.markdown(
                f"""
                <div style="
                    background:#111; 
                    padding:12px; 
                    border-radius:8px; 
                    border:1px solid #333; 
                    white-space:pre-wrap;
                ">
                    {c.source_text}
                </div>
                """,
                unsafe_allow_html=True
            )

# ====================================================================
#   ‚úÖ TAB 3 ‚Äî –°–ü–ò–°–û–ö –í–°–ï–• –í–ê–ö–ê–ù–°–ò–ô
# ====================================================================
with tab_all_jobs:
    st.subheader("üìå –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")

    for j in jobs:
        st.markdown(
            f"""
            <div style="
                border: 1px solid #2c2c2c;
                border-radius: 14px;
                padding: 18px;
                margin-bottom: 18px;
                background: linear-gradient(145deg, #161616, #111);
                box-shadow: 0 2px 6px rgba(0,0,0,0.4);
            ">
                <h4 style="margin-top:0; margin-bottom:10px;">üíº {j.title}</h4>
                <div style="line-height:1.6; font-size:15px;">
                    <b>–£—Ä–æ–≤–µ–Ω—å:</b> {j.level_required or '‚Äî'}<br>
                    <b>–î–æ–º–µ–Ω:</b> {j.domain or '‚Äî'}<br>
                    <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {j.specialization or '‚Äî'}<br>
                    <b>–°—Ç–µ–∫:</b> {', '.join(j.stack or []) or '‚Äî'}<br>
                    <b>Must-have:</b> {', '.join(j.must_have or []) or '‚Äî'}<br>
                    <b>Nice-to-have:</b> {', '.join(j.nice_to_have or []) or '‚Äî'}
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )

        with st.expander("üìÑ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", expanded=False):
            st.markdown(
                f"""
                <div style="
                    background:#121212; 
                    padding:14px; 
                    border-radius:10px; 
                    border:1px solid #2a2a2a;
                    margin-top:5px;
                    white-space:pre-wrap;
                    line-height:1.55;
                ">
                    {j.source_text}
                </div>
                """,
                unsafe_allow_html=True
            )

# ====================================================================
#   ‚úÖ TAB 4 ‚Äî –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–î–ò–î–ê–¢–ê
# ====================================================================
with tab_add:
    st.subheader("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

    resume_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
        placeholder="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ —Ä–µ–∑—é–º–µ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞...",
        height=200
    )

    if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"):
        if not resume_text.strip():
            st.error("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∑—é–º–µ.")
        else:
            try:
                # 1) –ü–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ LLM
                new_cand = parse_candidate(resume_text)

                st.markdown("""
                <div style="
                    background:#1e1e1e;
                    padding:15px;
                    border-radius:10px;
                    border:1px solid #444;
                    margin-top:15px;
                    margin-bottom:10px;">
                    <b>üìä –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b>
                </div>
                """, unsafe_allow_html=True)

                col1, col2 = st.columns(2)

                # ‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                with col1:
                    st.markdown("**üìÑ –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–µ–∑—é–º–µ:**")
                    pretty_box(resume_text)

                # ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with col2:
                    st.markdown("**‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")

                    result_pretty = ""
                    result_pretty += f"–ò–º—è: {new_cand.name or '‚Äî'}\n"
                    result_pretty += f"–£—Ä–æ–≤–µ–Ω—å: {new_cand.level or '‚Äî'}\n"
                    result_pretty += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {new_cand.specialization or '‚Äî'}\n"
                    result_pretty += f"–õ–æ–∫–∞—Ü–∏—è: {new_cand.location or '‚Äî'}\n\n"

                    if new_cand.skills:
                        result_pretty += f"–ù–∞–≤—ã–∫–∏: {', '.join(new_cand.skills)}\n"
                    if new_cand.subskills:
                        result_pretty += f"–§—Ä–µ–π–º–≤–æ—Ä–∫–∏: {', '.join(new_cand.subskills)}\n"

                    if new_cand.years_by_area:
                        result_pretty += "\n–û–ø—ã—Ç –ø–æ –æ–±–ª–∞—Å—Ç—è–º:\n"
                        for area, years in new_cand.years_by_area.items():
                            y = int(years) if years == int(years) else years
                            result_pretty += f"  ‚Ä¢ {area}: {y} –ª–µ—Ç\n"

                    if new_cand.salary_expectation:
                        result_pretty += f"\n–û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: {new_cand.salary_expectation}\n"

                    pretty_box(result_pretty)

                st.divider()

                # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π JSON
                with open("data/candidates.json", "r", encoding="utf-8") as f:
                    data = json.load(f)

                # 3) –ù–æ–≤—ã–π ID
                new_id = max(int(item["id"]) for item in data) + 1
                new_cand.id = new_id

                # 4) –î–æ–±–∞–≤–ª—è–µ–º
                data.append(new_cand.model_dump())

                with open("data/candidates.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                # 5) –ü–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
                rebuild_embeddings()

                st.success(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω! ID = {new_id}")
                st.info("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚Äî –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")

            except Exception as e:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                st.exception(e)


# ====================================================================
#   ‚úÖ TAB 5 ‚Äî –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–ê–ö–ê–ù–°–ò–ò
# ====================================================================
with tab_add_job:
    st.subheader("üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å—Å–∏–∏")

    job_text = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:",
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å—Å–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ...",
        height=220
    )

    if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"):
        if not job_text.strip():
            st.error("‚ùå –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é.")
        else:
            try:
                new_job = parse_job(job_text)

                st.markdown("""
                <div style="
                    background:#1e1e1e;
                    padding:15px;
                    border-radius:10px;
                    border:1px solid #444;
                    margin-top:15px;
                    margin-bottom:10px;">
                    <b>üìä –ö–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é:</b>
                </div>
                """, unsafe_allow_html=True)

                col1, col2 = st.columns(2)

                # ‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                with col1:
                    st.markdown("**üìÑ –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**")
                    pretty_box(job_text)

                # ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with col2:
                    st.markdown("**‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤—ã–≤–æ–¥
                    result_pretty = ""

                    result_pretty += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_job.title or '‚Äî'}\n"
                    result_pretty += f"–£—Ä–æ–≤–µ–Ω—å: {new_job.level_required or '‚Äî'}\n"
                    result_pretty += f"–î–æ–º–µ–Ω: {new_job.domain or '‚Äî'}\n"
                    result_pretty += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {new_job.specialization or '‚Äî'}\n\n"

                    if new_job.stack:
                        result_pretty += f"–°—Ç–µ–∫: {', '.join(new_job.stack)}\n"
                    if new_job.substack:
                        result_pretty += f"–§—Ä–µ–π–º–≤–æ—Ä–∫–∏: {', '.join(new_job.substack)}\n"

                    if new_job.must_have:
                        result_pretty += f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(new_job.must_have)}\n"
                    if new_job.nice_to_have:
                        result_pretty += f"–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ: {', '.join(new_job.nice_to_have)}\n"

                    if new_job.salary_max:
                        result_pretty += f"–ë—é–¥–∂–µ—Ç: –¥–æ {new_job.salary_max}\n"

                    if getattr(new_job, "exp_min_years_overall", None):
                        y = int(new_job.exp_min_years_overall)
                        result_pretty += f"–û–ø—ã—Ç: –æ—Ç {y} –ª–µ—Ç\n"

                    if getattr(new_job, "exp_min_years_by_area", None):
                        result_pretty += "–û–ø—ã—Ç –ø–æ –æ–±–ª–∞—Å—Ç—è–º:\n"
                        for area, years in new_job.exp_min_years_by_area.items():
                            result_pretty += f"  ‚Ä¢ {area}: –æ—Ç {int(years)} –ª–µ—Ç\n"

                    pretty_box(result_pretty)

                st.divider()

                # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                with open("data/jobs.json", "r", encoding="utf-8") as f:
                    data = json.load(f)

                new_id = max(int(item["id"]) for item in data) + 1
                new_job.id = new_id

                data.append(new_job.model_dump())

                with open("data/jobs.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)

                st.success(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID = {new_id}")
                st.info("–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ.")

            except Exception as e:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å—Å–∏–∏")
                st.exception(e)

