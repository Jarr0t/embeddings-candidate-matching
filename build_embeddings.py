import os
import json
import numpy as np
import faiss
from openai import OpenAI
from extract_candidate import Candidate

client = OpenAI()
EMBED_MODEL = "text-embedding-3-large"

VEC_PATH = "data/candidate_vectors.npy"
IDX_PATH = "data/candidate_index.faiss"
MAP_PATH = "data/candidate_id_map.json"
CANDS_PATH = "data/candidates.json"


def candidate_text_repr(c: Candidate) -> str:
    parts = []
    if c.level: parts.append(f"Level: {c.level}")
    if c.specialization: parts.append(f"Spec: {c.specialization}")
    if c.domains: parts.append("Domains: " + ", ".join(c.domains))
    if c.skills: parts.append("Skills: " + ", ".join(c.skills))
    if c.subskills: parts.append("Frameworks: " + ", ".join(c.subskills))
    return "\n".join(parts)


def embed_batch(texts):
    """–ë–∞—Ç—á–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    if not texts:
        return []
    resp = client.embeddings.create(
        model=EMBED_MODEL,
        input=texts
    )
    return [d.embedding for d in resp.data]


def build():
    with open(CANDS_PATH, "r", encoding="utf-8") as f:
        items = json.load(f)
    candidates = [Candidate.model_validate(x) for x in items]

    # =====================================
    # ‚úÖ –ï–°–õ–ò —Ñ–∞–π–ª –µ—Å—Ç—å ‚Äî –¥–æ–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö
    # =====================================
    if os.path.exists(VEC_PATH) and os.path.exists(IDX_PATH) and os.path.exists(MAP_PATH):
        print("‚úî –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö")

        old_vectors = np.load(VEC_PATH)
        index = faiss.read_index(IDX_PATH)

        with open(MAP_PATH, "r", encoding="utf-8") as f:
            old_ids = json.load(f)

        old_ids_set = set(str(x) for x in old_ids)

        new_cands = [c for c in candidates if str(c.id) not in old_ids_set]

        if not new_cands:
            print("‚úÖ –ù–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ—Ç. –ò–Ω–¥–µ–∫—Å —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω.")
            return

        print(f"üî® –ù–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(new_cands)}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã
        texts = [candidate_text_repr(c) for c in new_cands]

        # –ë–∞—Ç—á–µ–≤–æ —ç–º–±–µ–¥–¥–∏–º
        B = 64
        new_vecs = []
        for i in range(0, len(texts), B):
            batch = texts[i:i+B]
            batch_emb = embed_batch(batch)
            new_vecs.extend(batch_emb)

        new_vecs = np.array(new_vecs).astype("float32")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å + –∏–Ω–¥–µ–∫—Å
        updated_vectors = np.vstack([old_vectors, new_vecs])
        index.add(new_vecs)

        # –û–±–Ω–æ–≤–ª—è–µ–º id_map
        new_ids = old_ids + [c.id for c in new_cands]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        np.save(VEC_PATH, updated_vectors)
        faiss.write_index(index, IDX_PATH)
        with open(MAP_PATH, "w", encoding="utf-8") as f:
            json.dump(new_ids, f, ensure_ascii=False, indent=2)

        print("‚úÖ –ò–Ω–¥–µ–∫—Å –æ–±–Ω–æ–≤–ª—ë–Ω. –ù–æ–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        print(f"üì¶ –í—Å–µ–≥–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {updated_vectors.shape[0]}")

    # =====================================
    # ‚ùó –ï–°–õ–ò –§–ê–ô–õ–û–í –ù–ï–¢ ‚Äî —Å—Ç—Ä–æ–∏–º –≤—Å—ë —Å –Ω—É–ª—è
    # =====================================
    else:
        print("‚ö† –ò–Ω–¥–µ–∫—Å–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –Ω—É–ª—è")

        texts = [candidate_text_repr(c) for c in candidates]

        B = 64
        vectors = []
        for i in range(0, len(texts), B):
            batch = texts[i:i+B]
            batch_emb = embed_batch(batch)
            vectors.extend(batch_emb)

        vectors = np.array(vectors).astype("float32")

        np.save(VEC_PATH, vectors)

        dim = vectors.shape[1]
        index = faiss.IndexFlatL2(dim)
        index.add(vectors)
        faiss.write_index(index, IDX_PATH)

        ids = [c.id for c in candidates]
        with open(MAP_PATH, "w", encoding="utf-8") as f:
            json.dump(ids, f, ensure_ascii=False, indent=2)

        print("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ —Å –Ω—É–ª—è")
        print(f"üì¶ –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
        print(f"üì¶ –í–µ–∫—Ç–æ—Ä–æ–≤: {vectors.shape[0]}")


if __name__ == "__main__":
    build()
